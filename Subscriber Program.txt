import time
import paho.mqtt.client as mqtt
import json
from datetime import datetime
import RPi.GPIO as GPIO

# Configuration
MQTT_BROKER = "mqtt.eclipseprojects.io"
MQTT_TOPIC = "hotel/temperature"
THRESHOLD_TEMPERATURE = 25  # Example threshold in °C
CONSECUTIVE_THRESHOLD = 5
BUZZER_PIN = 17  # GPIO pin where the buzzer is connected

# Global variables
temperature_log = []
consecutive_count = 0

# GPIO setup for buzzer
GPIO.setmode(GPIO.BCM)
GPIO.setup(BUZZER_PIN, GPIO.OUT)

def on_message(client, userdata, message):
    global consecutive_count
    
    temperature = float(message.payload.decode())
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    print(f"Received temperature: {temperature}°C at {timestamp}")
    temperature_log.append({"timestamp": timestamp, "temperature": temperature})
    
    if temperature > THRESHOLD_TEMPERATURE:
        consecutive_count += 1
        if consecutive_count >= CONSECUTIVE_THRESHOLD:
            print(f"ALARM: Temperature exceeded {THRESHOLD_TEMPERATURE}°C for 5 consecutive minutes!")
            trigger_buzzer()
    else:
        consecutive_count = 0  # Reset if temperature drops
        stop_buzzer()

    save_data()

def trigger_buzzer():
    GPIO.output(BUZZER_PIN, GPIO.HIGH)  # Turn on the buzzer

def stop_buzzer():
    GPIO.output(BUZZER_PIN, GPIO.LOW)  # Turn off the buzzer

def save_data():
    with open('temperature_log.json', 'w') as file:
        json.dump(temperature_log, file)

def main():
    client = mqtt.Client()
    client.connect(MQTT_BROKER)
    client.subscribe(MQTT_TOPIC)
    
    client.on_message = on_message
    
    try:
        client.loop_forever()
    except KeyboardInterrupt:
        pass
    finally:
        GPIO.cleanup()  # Clean up GPIO on exit

if __name__ == "__main__":
    main()
